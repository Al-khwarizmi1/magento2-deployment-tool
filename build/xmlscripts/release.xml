<?xml version="1.0" encoding="UTF-8"?>

<project name="Release" basedir=".">

    <target name="release:validate:before"
            hidden="true">
        <if>
            <not>
                <isset property="setup.done"/>
            </not>
            <then>
                <echo level="error" message="Please run the setup install first:"/>
                <echo level="error" message="mg2-deployer setup"/>
                <fail message="Deployment tool setup not done"/>
            </then>
        </if>
    </target>

    <target name="release:build:project"
            depends="release:get:properties,
            release:prepare:folders"
            hidden="true">
        <if>
            <not><equals arg1="${command.get.project}" arg2=""/></not>
            <then>
                <property name="command.release.remove.downloads" value="rm -rf ${application.startdir}/${downloads.dir}/*" />
                <echo message="${command.release.remove.downloads}"/>
                <exec command="${command.release.remove.downloads}" logoutput="true" checkreturn="true"/>
                <echo message="${command.get.project}" />
                <exec command="${command.get.project}" logoutput="true" checkreturn="true"/>
            </then>
        </if>

        <echo message="${command.build.project}" />
        <exec command="${command.build.project}" outputProperty="command.release.build.output"
              logoutput="false" checkreturn="true"/>
        <phingcall target="util:check:output">
            <property name="check.output" value="${command.release.build.output}" override="true" />
        </phingcall>
    </target>

    <target name="release:get:properties"
            hidden="true">
        <if>
            <isset property="release.version"/>
            <then>
                <echo message="Release version already set to ${release.version}"/>
            </then>
            <else>
                <input propertyName="release.version" message="Please specify the release version: "/>
            </else>
        </if>
        <if>
            <contains string="${release.version}" substring="/"/>
            <then>
                <exec command="echo ${release.version} | tr / -" outputProperty="release.filename" checkreturn="true"/>
            </then>
            <else>
                <property name="release.filename" value="${release.version}"/>
            </else>
        </if>
        <if>
            <contains string="${release.version}" substring="develop" casesensitive="false"/>
            <then>
                <property name="release.filename" value="${release.filename}-${release.timestamp}" override="true"/>
            </then>
        </if>
        <if>
            <equals arg1="${build.project.type}" arg2="artifact"/>
            <then>
                <property name="command.get.project" value="${command.get.project.artifact}" override="true"/>
                <property name="command.build.project" value="${command.build.project.artifact}" override="true"/>
                <property name="magento.generate.files" value="0" override="true"/>
            </then>
        </if>
        <property name="downloads.target" value="${application.startdir}/${downloads.dir}/${release.version}"/>
        <property name="release.target" value="${application.startdir}/${releases.dir}/${release.filename}"/>
        <property file="${release.target}/config/project.properties" override="true" />
    </target>

    <target name="release:prepare:folders"
            hidden="true" >
        <if>
            <and>
                <available property="release.version.exists" file="${release.target}"/>
            </and>
            <then>
                <executeTarget target="release:delete:confirm"/>
                <echo message="Removing existing release for same version"/>
                <delete dir="${release.target}" failonerror="true"/>
            </then>
        </if>
    </target>

    <target name="release:delete:confirm"
            hidden="true">
        <if>
            <not>
                <isset property="release.overwrite"/>
            </not>
            <then>
                <echo message="${release.target} already exists!" level="warning"/>
                <input propertyName="release.overwrite"
                       message=" Would you like to remove it?"
                       defaultValue="y" validArgs="y,n"/>
            </then>
        </if>
        <if>
            <equals arg1="${release.overwrite}" arg2="n"/>
            <then>
                <fail message="${release.target} already exists and cannot be overwritten"/>
            </then>
        </if>
    </target>

    <target name="release:scripts:after"
            hidden="true">
        <property name="command.release.scripts.after" value="`which bash` ${scripts.release.after}"/>
        <echo message="${command.release.scripts.after}"/>
        <exec command="${command.release.scripts.after}" logoutput="true" />
    </target>

    <target name="release:switch:finish"
            hidden="true">
        <if>
            <and>
                <isset property="${finishWithMaintenance}"/>
            </and>
            <then>
                <executeTarget target="maintenance:set"/>
            </then>
            <else>
                <executeTarget target="release:live:replace"/>
            </else>
        </if>
    </target>

    <target name="release:live:replace"
            depends="util:properties:read"
            description="Set a specific release as live version">
        <if>
            <not>
                <isset property="release.target"/>
            </not>
            <then>
                <exec command="cd ${application.startdir}/${releases.dir} &amp;&amp; ls -t | head -n 1"
                      outputProperty="latest.release.version"
                      checkreturn="true"/>

                <input message="Release version to set live: " propertyName="release.version" defaultValue="${latest.release.version}"/>
                <property name="release.target" value="${application.startdir}/${releases.dir}/${release.version}"/>
            </then>
        </if>
        <if>
            <or>
                <equals arg1="${release.target}" arg2="" />
                <not>
                    <available property="release.target.exists" file="${release.target}"/>
                </not>
            </or>
            <then>
                <fail message="Release target not found: ${release.target}"/>
            </then>
        </if>

        <exec command="${bin.symlinker-pro} create:link ${release.target} ${application.startdir}/${live.symlink} -f" checkreturn="true" logoutput="true"/>

        <property name="live.dir.before.maintenance" value="false" override="true"/>
        <executeTarget target="cache:clean:all"/>
    </target>

</project>