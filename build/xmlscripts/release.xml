<?xml version="1.0" encoding="UTF-8"?>

<project name="Release">

    <target name="release:validate:before"
            hidden="true">
        <if>
            <not>
                <isset property="setup.done"/>
            </not>
            <then>
                <echo level="error" message="Please run the setup install first:"/>
                <echo level="error" message="mg2-deployer setup"/>
                <fail message="Deployment tool setup not done"/>
            </then>
        </if>
    </target>

    <target name="release:get:project"
            depends="release:get:properties,
            release:target:validate"
            hidden="true">

        <echo message="${command.get.project}" />
        <exec command="${command.get.project}" logoutput="true" checkreturn="true"/>

    </target>

    <target name="release:get:properties"
            hidden="true">
        <if>
            <isset property="release.version"/>
            <then>
                <echo message="Release version already set to ${release.version}"/>
            </then>
            <else>
                <input propertyName="release.version" message="Please specify the release version: "/>
            </else>
        </if>
        <if>
            <contains string="${release.version}" substring="/"/>
            <then>
                <exec command="echo ${release.version} | tr / -" outputProperty="release.filename" checkreturn="true"/>
            </then>
            <else>
                <property name="release.filename" value="${release.version}"/>
            </else>
        </if>
        <if>
            <or>
                <contains string="${release.version}" substring="SNAPSHOT" casesensitive="false"/>
                <contains string="${release.version}" substring="develop" casesensitive="false"/>
            </or>
            <then>
                <property name="release.target" value="${application.startdir}/${releases.dir}/${release.filename}-${release.timestamp}"/>
                <property name="command.get.project" value="${command.get.project.snapshot}"/>
                <property name="command.build.project" value="${command.build.project.snapshot}"/>
            </then>
            <else>
                <property name="release.target" value="${application.startdir}/${releases.dir}/${release.filename}" />
                <property name="command.get.project" value="${command.get.project.version}" override="true"/>
                <property name="command.build.project" value="${command.build.project.version}" override="true"/>
            </else>
        </if>
    </target>

    <target name="release:target:validate"
            hidden="true">
        <if>
            <available property="release.version.exists" file="${release.target}"/>
            <then>
                <if>
                    <not>
                        <isset property="release.overwrite"/>
                    </not>
                    <then>
                        <input propertyName="release.overwrite"
                               message="The release target ${release.target} already exists. Would you like to overwrite this version?"
                               defaultValue="y" validArgs="y,n"/>
                    </then>
                </if>
                <if>
                    <equals arg1="${release.overwrite}" arg2="y"/>
                    <then>
                        <echo message="Removing existing old release with same name"/>
                        <delete dir="${release.target}" failonerror="true"/>
                    </then>
                    <else>
                        <fail message="${release.target} already exists and cannot be overwritten"/>
                    </else>
                </if>
            </then>
            <else>
                <echo message="${release.target} is a valid version to be deployed" />
            </else>
        </if>

    </target>

    <target name="release:build:project"
            hidden="true">
        <property name="command.release.build" value="cd ${release.target} &amp;&amp; ${command.build.project}"/>
        <echo message="${command.release.build}" />
        <exec command="${command.release.build}"
              outputProperty="command.release.build.output"
              logoutput="false" checkreturn="true" />
        <phingcall target="util:check:output">
            <property name="check.output" value="${command.release.build.output}" override="true" />
        </phingcall>
    </target>

    <target name="release:scripts:after"
            hidden="true">
        <property name="command.release.scripts.after" value="`which bash` ${scripts.release.after}"/>
        <echo message="${command.release.scripts.after}"/>
        <exec command="${command.release.scripts.after}" logoutput="true" />
    </target>

</project>