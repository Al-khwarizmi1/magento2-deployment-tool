<?xml version="1.0" encoding="UTF-8"?>

<project name="Release" basedir="../..">

    <target name="release:get:properties"
            description="Get release specific properties"
            hidden="true">

        <if>
            <isset property="release.version"/>
            <then>
                <echo message="Release version already set to ${release.version}"/>
            </then>
            <else>
                <input propertyName="release.version" message="Please specify the release version: "/>
            </else>
        </if>

        <if>
            <contains string="${release.version}" substring="/"/>
            <then>
                <exec command="echo ${release.version} | tr / -" outputProperty="release.filename" checkreturn="true"/>
            </then>
            <else>
                <property name="release.filename" value="${release.version}"/>
            </else>
        </if>

        <if>
            <contains string="${release.version}" substring="SNAPSHOT" casesensitive="false"/>
            <then>
                <property name="release.target" value="${server.releases.dir}/${release.filename}-${release.timestamp}"/>
                <property name="command.get.project" value="${command.get.project.snapshot}"/>
                <property name="command.build.project" value="${command.build.project.snapshot}"/>
            </then>
            <else>
                <property name="release.target" value="${server.releases.dir}/${release.filename}" />
                <property name="command.get.project" value="${command.get.project.version}" override="true"/>
                <property name="command.build.project" value="${command.build.project.version}" override="true"/>
            </else>
        </if>

        <exec command="cd ${server.live.dir} &amp;&amp; cd $(readlink .) | pwd -P" outputProperty="current.version.target"/>

    </target>

    <target name="release:target:validate"
            description="Validate that the new version can be deployed"
            hidden="true">

        <if>
            <available property="releaseAlreadyExisting" file="${release.target}"/>
            <then>
                <if>
                    <not>
                        <isset property="release.overwrite"/>
                    </not>
                    <then>
                        <input propertyName="release.overwrite" message="The release target ${release.target} already exists. Would you like to overwrite this version?" defaultValue="y" validArgs="y,n"/>
                    </then>
                </if>
                <if>
                    <equals arg1="${release.overwrite}" arg2="y"/>
                    <then>
                        <echo message="Removing existing old release with same name"/>
                        <property name="command.delete.samerelease" value="rm -rf ${release.target}"/>
                        <echo message="${command.delete.samerelease}"/>
                        <exec command="${command.delete.samerelease}" checkreturn="true" logoutput="true"/>
                    </then>
                    <else>
                        <fail message="${release.target} already exists and cannot be overwritten"/>
                    </else>
                </if>
            </then>
            <else>
                <echo message="${release.target} is a valid version to be deployed" />
            </else>
        </if>

    </target>

    <target name="release:get:project"
            description="git pull"
            depends="release:get:properties, release:target:validate"
            hidden="true">

        <echo message="${command.get.project}" />
        <exec command="${command.get.project}" logoutput="true" checkreturn="true"/>

    </target>

    <target name="release:build:project"
            description="Build a new project version package"
            hidden="true">

        <echo message="cd ${release.target} &amp;&amp; ${command.build.project}" />
        <exec command="cd ${release.target} &amp;&amp; ${command.build.project}" logoutput="false" checkreturn="true"/>

    </target>

    <target name="release:newVersion:set"
            description="update live version path with the new release"
            hidden="true">

        <symlink target="${release.target}"
                 link="${server.live.dir}"
                 overwrite="true"/>

    </target>


</project>